0x49dEBFF101bd9Ce9770df6ed2B9e2A60a61dDC08
0x7e8CCCe7DDe14dEf327888D6B04c488533913722
0x1976A592aBAFe62Eb98ec3b5789b2F71F6C5D30d
0xb029B40BC7858659C2Dc18afB1B0e4Bb028f4916
0xE5Cc65694a84c167c86223455Fdf8Cba4a10C0A5

geth account new --datadir data - создание нового аккаунта
geth init --datadir data genesis.json - создание генезис блока

geth --datadir data --networkid 12345 --unlock 0x49dEBFF101bd9Ce9770df6ed2B9e2A60a61dDC08 --allow-insecure-unlock --http --http.corsdomain="*" --http.api web3,eth,debug,personal,net,miner --miner.etherbase 0x49dEBFF101bd9Ce9770df6ed2B9e2A60a61dDC08 - запуск чатсной сети блокчейна

geth attach --datadir data ipc:\\.\pipe\geth.ipc - создание отдельной консоли geth для того, чтобы управлять процессами в блокчейне
    eth.blockNumber - номер блока






















from flask import Flask, request, render_template, redirect, url_for, flash, session
import re
from web3 import Web3, HTTPProvider
from contract_info import abi, contract_address
from web3.middleware import geth_poa_middleware

app = Flask(__name__)

w3 = Web3(HTTPProvider('http://127.0.0.1:8545'))

w3.middleware_onion.inject(geth_poa_middleware, layer=0)
contract = w3.eth.contract(address=contract_address, abi=abi)


def validate_password(password):
    if len(password) < 12:
        return False, "Пароль должен быть не менее 12 символов"
    if not re.search("[a-z]", password):
        return False, "Пароль должен содержать хотя бы одну строчную букву"
    if not re.search("[A-Z]", password):
        return False, "Пароль должен содержать хотя бы одну прописную букву"
    if not re.search("[0-9]", password):
        return False, "Пароль должен содержать хотя бы одну цифру"
    if not re.search("[!@#$%^&*(),.?\":{}|<>]", password):
        return False, "Пароль должен содержать хотя бы один специальный символ"
    if re.fullmatch(r"(Password12345|Qwerty123456!)", password):
        return False, "Избегайте простых и общеизвестных паролей"
    return True, ""

def register():
    password = input("Введите пароль: ")
    valid, message = validate_password(password)
    if not valid:
        print(message)
        return
    try:
        account = w3.geth.personal.new_account(password)
        print(f"Публичный ключ: {account}")
    except Exception as e:
        print(f"Ошибка регистрации: {e}")

def login():
    public_key = input("Введите ключ: ")
    password = input("Введите пароль: ")
    try:
        w3.geth.personal.unlock_account(public_key, password, 300)
        print("Авторизация прошла успешно")
        return public_key
    except Exception as e:
        print(f"Ошибка авторизации: {e}")
        return None

def create_estate(account):
    address_estate = input("Введите адрес недвижимости: ")
    square = int(input("Введите площадь в квадратных метрах: "))
    if square <= 2:
        print("Площадь недвижимости должна быть больше 2 кв.м")
        return
    es_type = int(input("Введите тип недвижимости (0-House, 1-Flat, 2-Loft, 3-Dacha): "))
    try:
        tx_hash = contract.functions.createEstate(address_estate, square, es_type).transact({'from': account})
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        print(f"Транзакция создания недвижимости подтверждена: {receipt.transactionHash.hex()}")
    except Exception as e:
        print(f"Ошибка создания недвижимости: {e}")

def change_estate_status(account):
    estate_id = int(input("Введите ID недвижимости: "))
    is_active = input("Активна недвижимость? (да/нет): ").lower() == 'да'
    try:
        tx_hash = contract.functions.updateEstateActive(estate_id, is_active).transact({'from': account})
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        print(f"Транзакция изменения статуса недвижимости подтверждена: {receipt.transactionHash.hex()}")
    except Exception as e:
        print(f"Ошибка изменения статуса недвижимости: {e}")

def create_advertisement(account):
    estate_id = int(input("Введите ID недвижимости для объявления: "))
    price = float(input("Введите цену в эфирах: "))
    if price <= 0:
        print("Цена должна быть больше нуля")
        return
    try:
        tx_hash = contract.functions.createAd(estate_id, int(price)).transact({'from': account})
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        print(f"Транзакция создания объявления подтверждена: {receipt.transactionHash.hex()}")
    except Exception as e:
        print(f"Ошибка создания объявления: {e}")

def change_ad_status(account):
    ad_id = int(input("Введите ID объявления: "))
    new_status = int(input("Введите новый статус объявления (0-Opened, 1-Closed): "))
    try:
        tx_hash = contract.functions.updateAdType(ad_id, new_status).transact({'from': account})
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        print(f"Транзакция изменения статуса объявления подтверждена: {receipt.transactionHash.hex()}")
    except Exception as e:
        print(f"Ошибка изменения статуса объявления: {e}")

def buy_estate(account):
    ad_id = int(input("Введите ID объявления для покупки: "))
    try:
        ads = contract.functions.getAds().call({'from': account})
        ad = next((ad for ad in ads if ad[1] == ad_id), None)
        if ad is None:
            print("Объявление с таким ID не найдено.")
            return

        price_in_wei = ad[0]  
        balance = w3.eth.get_balance(account)
        if balance < price_in_wei:
            print("Недостаточно средств для покупки")
            return

        tx_hash = contract.functions.buyEstate(ad_id).transact({'from': account, 'value': price_in_wei})
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        print(f"Транзакция покупки недвижимости подтверждена: {receipt.transactionHash.hex()}")
    except Exception as e:
        print(f"Ошибка покупки недвижимости: {e}")

def withdraw(account):
    try:
        amount = int(input("Введите количество эфира для вывода: "))
        tx_hash = contract.functions.withdraw(amount).transact({
            'from': account,
        })
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        print(f"Транзакция {tx_hash.hex()} подтверждена")
    except ValueError:
        print("Ошибка: неверное значение")
    except Exception as e:
        print(f"Ошибка снятия средств: {e}")

def get_balance_on_contract(account):
    try:
        balance = contract.functions.getBalance().call({'from': account})
        print(f"Ваш баланс на смарт-контракте: {balance / 1000000000000000000} eth")
    except Exception as e:
        print(f"Ошибка получения информации о балансе: {e}")

def get_estates(account):
   
        estates = contract.functions.getEstates().call({'from': account})
        
        if not estates:
    
            print("Нет доступных недвижимостей.")
        else:
            print(f"Список недвижимостей:\n{estates}")

def get_ads(account):
    
        ads = contract.functions.getAds().call({'from': account})
        
        if not ads:
            print("Нет доступных объявлений.")
        else:
            print(f"Список объявлений:\n{ads}")

def pay(account):
    try:
        amount = int(input("Введите количество средств: "))
        contract.functions.pay().transact({
                'from': account,
                'value': amount*1000000000000000000
            })
        print("Пополнение средств прошло успешно!")
    except Exception as e:
        print("Ошибка: ", e)
        

def main():
    account = ""
    is_auth = False
    while True:
        if not is_auth:
            choice = input("Введите:\n1. Авторизация\n2. Регистрация\n3. Выход\n")
            if choice == "1":
                account = login()
                if account:
                    is_auth = True
            elif choice == "2":
                register()
            elif choice == "3":
                break
            else:
                print("Введите 1, 2 или 3")
        else:
            choice = input("Введите:\n1. Создать недвижимость\n2. Изменить статус недвижимости\n3. Создать объявление\n4. Изменить статус объявления\n5. Купить недвижимость\n6. Посмотреть информацию\n7. Посмотреть баланс аккаунта\n8. Вывести средства\n9. Пополнить средства\n10. Выйти из аккаунта\n")
            if choice == "1":
                create_estate(account)
            elif choice == "2":
                change_estate_status(account)
            elif choice == "3":
                create_advertisement(account)
            elif choice == "4":
                change_ad_status(account)
            elif choice == "5":
                buy_estate(account)
            elif choice == "6":
                sub_choice = input("Введите:\n1. Посмотреть баланс на смарт-контракте\n2. Посмотреть доступные недвижимости\n3. Посмотреть текущие объявления\n")
                if sub_choice == "1":
                    get_balance_on_contract(account)
                elif sub_choice == "2":
                    get_estates(account)
                elif sub_choice == "3":
                    get_ads(account)
                else:
                    print("Введите число от 1 до 3")
            elif choice == "7":
                print(f"Баланс аккаунта: {w3.eth.get_balance(account) / 1000000000000000000} ")
            elif choice == "8":
                withdraw(account)
            elif choice == "9":
                pay(account)
            elif choice == "10":
                is_auth = False
            else:
                print("Введите число от 1 до 10")

if __name__ == "__main__":
    main()

    